/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import formingWords.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose
 */
public class formingWordsGUI extends javax.swing.JFrame {

    /**
     * Creates new form formingWordsGUI
     */
    operationFormingWords op = new operationFormingWords();//call at new intances
//definite all variable global for used in this class 
    public String originalWord = op.wordsOriginal(op.words());
    public String showDisform = "";
    public int Score = 100, correctAnswer = 0;

    public String answerUserGlobal = "";
    public boolean band1 = false;
    public boolean band2 = false;
    public boolean band3 = false;
    public boolean band4 = false;
    public boolean band5 = false;
    public boolean band6 = false;
    public boolean band7 = false;
    public boolean band8 = false;

    public formingWordsGUI() {//in the constructor called the methods for show by first time
        initComponents();
        showDisform = op.disformArrayWord(op.words2(originalWord));//op.words2 passed by parameters
        showDisformingLabel.setText(showDisform);//set the text of the word disformed by first
        showScore.setText(String.valueOf(Score));//set the text of score for first
        showCorrectAnswer.setText(String.valueOf(correctAnswer));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        panelOfformingWords = new javax.swing.JPanel();
        solutionsButton = new javax.swing.JButton();
        finishGame = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        formingTitleLabel = new javax.swing.JLabel();
        scoreTitleLabel = new javax.swing.JLabel();
        showDisformingLabel = new javax.swing.JLabel();
        TextField1 = new javax.swing.JTextField();
        TextField2 = new javax.swing.JTextField();
        TextField3 = new javax.swing.JTextField();
        TextField4 = new javax.swing.JTextField();
        TextField5 = new javax.swing.JTextField();
        TextField6 = new javax.swing.JTextField();
        TextField7 = new javax.swing.JTextField();
        TextField8 = new javax.swing.JTextField();
        showScore = new javax.swing.JLabel();
        correctAnswersLabel = new javax.swing.JLabel();
        showCorrectAnswer = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelOfformingWords.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        solutionsButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        solutionsButton.setText("Solve");
        solutionsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        solutionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solutionsButtonActionPerformed(evt);
            }
        });

        finishGame.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        finishGame.setText("End Game");
        finishGame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        finishGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishGameActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        formingTitleLabel.setBackground(new java.awt.Color(204, 204, 204));
        formingTitleLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 16)); // NOI18N
        formingTitleLabel.setText(" Forming Words");

        scoreTitleLabel.setBackground(new java.awt.Color(204, 204, 204));
        scoreTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreTitleLabel.setText("Score:");

        showDisformingLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        showDisformingLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField1ActionPerformed(evt);
            }
        });
        TextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField1KeyTyped(evt);
            }
        });

        TextField2.setEditable(false);
        TextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField2KeyTyped(evt);
            }
        });

        TextField3.setEditable(false);
        TextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField3KeyTyped(evt);
            }
        });

        TextField4.setEditable(false);
        TextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField4KeyTyped(evt);
            }
        });

        TextField5.setEditable(false);
        TextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField5KeyTyped(evt);
            }
        });

        TextField6.setEditable(false);
        TextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField6KeyTyped(evt);
            }
        });

        TextField7.setEditable(false);
        TextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField7KeyTyped(evt);
            }
        });

        TextField8.setEditable(false);
        TextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextField8KeyTyped(evt);
            }
        });

        showScore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        correctAnswersLabel.setBackground(new java.awt.Color(204, 204, 204));
        correctAnswersLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        correctAnswersLabel.setText("Correct Answer:");

        showCorrectAnswer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelOfformingWordsLayout = new javax.swing.GroupLayout(panelOfformingWords);
        panelOfformingWords.setLayout(panelOfformingWordsLayout);
        panelOfformingWordsLayout.setHorizontalGroup(
            panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOfformingWordsLayout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scoreTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showScore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(correctAnswersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showCorrectAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(160, 160, 160))
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addComponent(showDisformingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(solutionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 98, Short.MAX_VALUE))
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addComponent(TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finishGame)
                            .addComponent(TextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(formingTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelOfformingWordsLayout.setVerticalGroup(
            panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(formingTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showDisformingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOfformingWordsLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(solutionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)))
                .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(finishGame, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(showScore, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelOfformingWordsLayout.createSequentialGroup()
                        .addGroup(panelOfformingWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scoreTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(correctAnswersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showCorrectAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelOfformingWords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelOfformingWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**/
    private void finishGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishGameActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_finishGameActionPerformed

    private void solutionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solutionsButtonActionPerformed
        // TODO add your handling code here:
        try {
            JOptionPane.showMessageDialog(rootPane, "The word is: " + originalWord);
            //the button solution put all with the original form
            showDisformingLabel.setText("");
            showDisform = op.disformArrayWord(op.words());
            originalWord = op.wordsOriginal(op.words());
            showDisform = op.disformArrayWord(op.words2(originalWord));
            showDisformingLabel.setText(showDisform);
            Score = Score - 10;//by used the button solutions the score rest 10
            showScore.setText(String.valueOf(Score));//show score
            if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_solutionsButtonActionPerformed

    private void TextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField1ActionPerformed

    private void TextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField1KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {//to validate the chart with only letters of alphabet
                evt.consume();//this method is used to eliminate the other letters 
            }
            if (band1 == false) {//for not introduced other letter if the answer is correct
                String textOne = TextField1.getText();
                if (TextField1.getText().length() == 1) {//if in the jtextfield the user put more than one letters the system eliminate the others 
                    evt.consume();
                }
                char firtChar = originalWord.charAt(0);//assigns the chart of the letter that corresponds of the chart(position)
                if (textOne.equalsIgnoreCase(String.valueOf(firtChar))) {//if the textOne is the same of firts char 
                    TextField1.setEditable(false);//put the editable in false
                    TextField2.setEditable(true);//put the editable on true that previously this value is false
                    answerUserGlobal += textOne;//in the answerGlobal is concatenated
                    textOne = "";
                    band1 = true;//change the value to true
                } else if (!textOne.equalsIgnoreCase("")) {//if textOne is not the same of "" indicate that textOne is no empty
                    TextField1.setText("");
                    Score -= 1;//for each attempt,1 is subtraction at the score 
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {//if the answerUserglobal is the same of originalWord is correct
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField1.addKeyListener(null);//the keylistener is null 
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
               if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField1KeyTyped
    /*Important
        
    */
    private void TextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField2KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band2 == false) {
                String textTwo = TextField2.getText();
                if (TextField2.getText().length() == 1) {
                    evt.consume();
                }
                char WordChar = originalWord.charAt(1);
                if (textTwo.equalsIgnoreCase(String.valueOf(WordChar))) {
                    answerUserGlobal += textTwo;
                    TextField2.setEditable(false);
                    TextField3.setEditable(true);
                    textTwo = "";
                    band2 = true;
                } else if (!textTwo.equalsIgnoreCase("")) {
                    TextField2.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField2KeyTyped

    private void TextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField3KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band3 == false) {
                String textThree = TextField3.getText();
                if (TextField3.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(2);
                if (textThree.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textThree;
                    TextField3.setEditable(false);
                    TextField4.setEditable(true);
                    textThree = "";
                    band3 = true;
                } else if (!textThree.equalsIgnoreCase("")) {
                    TextField3.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField3KeyTyped

    private void TextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField4KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band4 == false) {
                String textFour = TextField4.getText();
                if (TextField4.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(3);
                if (textFour.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textFour;
                    TextField4.setEditable(false);
                    TextField5.setEditable(true);
                    textFour = "";
                    band4 = true;
                } else if (!textFour.equalsIgnoreCase("")) {
                    TextField4.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField2.setEditable(false);
                    TextField4.setEditable(false);
                    TextField5.setEditable(false);
                    TextField6.setEditable(false);
                    TextField7.setEditable(false);
                    TextField8.setEditable(false);
                    showDisformingLabel.setText("");
                    showDisform = op.disformArrayWord(op.words());
                    originalWord = op.wordsOriginal(op.words());
                    showDisform = op.disformArrayWord(op.words2(originalWord));
                    showDisformingLabel.setText(showDisform);
                    answerUserGlobal = "";
                    band1 = false;
                    band2 = false;
                    band3 = false;
                    band4 = false;
                    band5 = false;
                    band6 = false;
                    band7 = false;
                    band8 = false;
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField4KeyTyped

    private void TextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField5KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band5 == false) {
                String textFive = TextField5.getText();
                if (TextField5.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(4);
                if (textFive.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textFive;
                    TextField5.setEditable(false);
                    TextField6.setEditable(true);
                    textFive = "";
                    band5 = true;
                } else if (!textFive.equalsIgnoreCase("")) {
                    TextField5.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField2.setEditable(false);
                    TextField4.setEditable(false);
                    TextField5.setEditable(false);
                    TextField6.setEditable(false);
                    TextField7.setEditable(false);
                    TextField8.setEditable(false);
                    showDisformingLabel.setText("");
                    showDisform = op.disformArrayWord(op.words());
                    originalWord = op.wordsOriginal(op.words());
                    showDisform = op.disformArrayWord(op.words2(originalWord));
                    showDisformingLabel.setText(showDisform);
                    answerUserGlobal = "";
                    band1 = false;
                    band2 = false;
                    band3 = false;
                    band4 = false;
                    band5 = false;
                    band6 = false;
                    band7 = false;
                    band8 = false;
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField5KeyTyped

    private void TextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField6KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band6 == false) {
                String textSix = TextField6.getText();
                if (TextField6.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(5);
                if (textSix.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textSix;
                    TextField6.setEditable(false);
                    TextField7.setEditable(true);
                    textSix = "";
                    band6 = true;
                } else if (!textSix.equalsIgnoreCase("")) {
                    TextField6.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField2.setEditable(false);
                    TextField4.setEditable(false);
                    TextField5.setEditable(false);
                    TextField6.setEditable(false);
                    TextField7.setEditable(false);
                    TextField8.setEditable(false);
                    showDisformingLabel.setText("");
                    showDisform = op.disformArrayWord(op.words());
                    originalWord = op.wordsOriginal(op.words());
                    showDisform = op.disformArrayWord(op.words2(originalWord));
                    showDisformingLabel.setText(showDisform);
                    answerUserGlobal = "";
                    band1 = false;
                    band2 = false;
                    band3 = false;
                    band4 = false;
                    band5 = false;
                    band6 = false;
                    band7 = false;
                    band8 = false;
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField6KeyTyped

    private void TextField7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField7KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band7 == false) {
                String textSeven = TextField7.getText();
                if (TextField7.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(6);
                if (textSeven.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textSeven;
                    TextField7.setEditable(false);
                    TextField8.setEditable(true);
                    textSeven = "";
                    band7 = true;
                } else if (!textSeven.equalsIgnoreCase("")) {
                    TextField7.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField2.setEditable(false);
                    TextField4.setEditable(false);
                    TextField5.setEditable(false);
                    TextField6.setEditable(false);
                    TextField7.setEditable(false);
                    TextField8.setEditable(false);
                    showDisformingLabel.setText("");
                    showDisform = op.disformArrayWord(op.words());
                    originalWord = op.wordsOriginal(op.words());
                    showDisform = op.disformArrayWord(op.words2(originalWord));
                    showDisformingLabel.setText(showDisform);
                    answerUserGlobal = "";
                    band1 = false;
                    band2 = false;
                    band3 = false;
                    band4 = false;
                    band5 = false;
                    band6 = false;
                    band7 = false;
                    band8 = false;
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField7KeyTyped

    private void TextField8KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField8KeyTyped
        // TODO add your handling code here:
        try {
            char c = evt.getKeyChar();
            if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {
                evt.consume();
            }
            if (band8 == false) {
                String textEight = TextField8.getText();
                if (TextField8.getText().length() == 1) {
                    evt.consume();
                }
                char wordChar = originalWord.charAt(7);
                if (textEight.equalsIgnoreCase(String.valueOf(wordChar))) {
                    answerUserGlobal += textEight;
                    TextField8.setEditable(false);
                    textEight = "";
                    band8 = true;
                } else if (!textEight.equalsIgnoreCase("")) {
                    TextField8.setText("");
                    Score -= 1;
                    showScore.setText(String.valueOf(Score));
                }
                if (answerUserGlobal.equalsIgnoreCase(originalWord)) {
                    JOptionPane.showMessageDialog(rootPane, "The entered word is correct");
                    TextField1.setText("");
                    TextField2.setText("");
                    TextField3.setText("");
                    TextField4.setText("");
                    TextField5.setText("");
                    TextField6.setText("");
                    TextField7.setText("");
                    TextField8.setText("");
                    TextField1.setEditable(true);
                    TextField2.setEditable(false);
                    TextField4.setEditable(false);
                    TextField5.setEditable(false);
                    TextField6.setEditable(false);
                    TextField7.setEditable(false);
                    TextField8.setEditable(false);
                    showDisformingLabel.setText("");
                    showDisform = op.disformArrayWord(op.words());
                    originalWord = op.wordsOriginal(op.words());
                    showDisform = op.disformArrayWord(op.words2(originalWord));
                    showDisformingLabel.setText(showDisform);
                    answerUserGlobal = "";
                    band1 = false;
                    band2 = false;
                    band3 = false;
                    band4 = false;
                    band5 = false;
                    band6 = false;
                    band7 = false;
                    band8 = false;
                    correctAnswer++;
                    showCorrectAnswer.setText(String.valueOf(correctAnswer));
                }
                if (Score <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Sorry but you do not have more points to continue playing"
                        + "\n Correct Answer: " + correctAnswer);
                setVisible(false);
                this.dispose();//close 
                mainGUI main = new mainGUI();//new instance for a new game
                main.setTitle("Programming Project");
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error has occured!");
        }
    }//GEN-LAST:event_TextField8KeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextField1;
    private javax.swing.JTextField TextField2;
    private javax.swing.JTextField TextField3;
    private javax.swing.JTextField TextField4;
    private javax.swing.JTextField TextField5;
    private javax.swing.JTextField TextField6;
    private javax.swing.JTextField TextField7;
    private javax.swing.JTextField TextField8;
    private javax.swing.JLabel correctAnswersLabel;
    private javax.swing.JButton finishGame;
    private javax.swing.JLabel formingTitleLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel panelOfformingWords;
    private javax.swing.JLabel scoreTitleLabel;
    private javax.swing.JLabel showCorrectAnswer;
    public javax.swing.JLabel showDisformingLabel;
    private javax.swing.JLabel showScore;
    private javax.swing.JButton solutionsButton;
    // End of variables declaration//GEN-END:variables
}
